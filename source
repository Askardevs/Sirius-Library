-- VARIABLES
local mobs = {} -- MOBS TABLE
getgenv().mob = nil -- SELECTED MOB

_G.farmdistance = 2
_G.stamina = false

-- MOBS
for _,v in pairs(game:GetService('Workspace').SpawnedMobs:GetChildren()) do -- LOOPS THROUGH ALL MOBS
    insert = true -- VALUE TO CHECK THE MOB
    for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
    if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
end

-- UI LIBRARY

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/Askardevs/Sirius-Library/main/source')))()
local Window = OrionLib:MakeWindow({Name = 'â­•  Sirius Hub | Blue Heater', HidePremium = false, SaveConfig = true, ConfigFolder = 'Sirius Hub', IntroText = 'Sirius Hub'})

-- TAB 1 CODE

local Tab1 = Window:MakeTab({
	Name = 'Main',
	Icon = 'rbxassetid://4483345998',
	PremiumOnly = false
})

local mobdropdown = Tab1:AddDropdown({
	Name = 'Select Mob',
	Default = 'Select Mob',
	Options = mobs,
	Callback = function(Value)
		getgenv().mob = Value
	end    
})

Tab1:AddSlider({
	Name = 'Farm Distance',
	Min = 1,
	Max = 20,
	Default = 2,
	Color = Color3.fromRGB(255,0,0),
	Increment = 1,
	ValueName = '',
	Callback = function(Value)
		_G.farmdistance = Value
	end    
})

Tab1:AddToggle({
	Name = 'Auto Farm',
	Default = false,
	Callback = function(v)
		getgenv().autofarmmobs = v
        while wait() do -- INFINITE LOOP
            if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
            if getgenv().mob == nil then -- IF THE MOB ISNT SELECTED
                game.StarterGui:SetCore('SendNotification', { -- SHOW NOTIFIACTION
                    Title = 'Error!', -- NOTIFICACTION LABEL
                    Text = 'You havent selected a mob with the dropdown above\nUntoggle this toggle!', -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = '', -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                getgenv().autofarmmobs = false -- TURN OFF THE AUTO FARM
                return -- MAKE SURE IT DOESNT EXECUTE ANYTHING UNDER // FULLY TURN OFF THE LOOP
            end
            local mob = game:GetService('Workspace').SpawnedMobs:FindFirstChild(getgenv().mob)
            if mob == nil then
                game.StarterGui:SetCore('SendNotification', { -- SHOW NOTIFIACTION
                    Title = 'Info!', -- NOTIFICACTION LABEL
                    Text = 'There is currently no spawned mobs of this type!\nJust wait until they spawn', -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = '', -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                while wait() do -- LOOP WHICH REPEATS UNTIL THE UNTIL IS TRUE / DONE
                    wait() -- WAIT SO WE DONT CRASH
                    if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if game:GetService('Workspace').SpawnedMobs:FindFirstChild(getgenv().mob) ~= nil then break; end
                end -- IF THE MOB IS SPAWNED THEN GO ON WITH THE AUTOFARM
            else
                local mob2 = mob
                while wait() do
                    mob = game:GetService('Workspace').SpawnedMobs:FindFirstChild(getgenv().mob)
                    if mob ~= mob2 then break; end
                    if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if mob ~= nil then
                        if mob:FindFirstChild('Humanoid') then
                            if mob.Humanoid.Health == 0 then wait(0.1) mob:Destroy() break; end -- IF THE MOB IS DEAD THEN JUST DESTROY IT FOR FASTER FARMING
                        end
                        if mob:FindFirstChild('HumanoidRootPart') then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame * CFrame.new(0,0,_G.farmdistance) -- TELEPORT TO THE MOB
                        end
                    end
                    wait() -- WAIT SO WE DONT CRASH
                end
            end
        end
	end    
})

-- UPDATING THE MOBS

game:GetService("Workspace").SpawnedMobs.ChildAdded:Connect(function() -- WHEN MOB SPAWNS
    mobdropdown:Refresh(mobs, true)
    -- ADDS THE NEW MOBS
    for _,v in pairs(game:GetService("Workspace").SpawnedMobs:GetChildren()) do -- LOOPS THROUGH ALL MOBS
        insert = true -- VALUE TO CHECK THE MOB
        for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
        if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
    end
    mobdropdown:Refresh(mobs)
end)

game:GetService("Workspace").SpawnedMobs.ChildRemoved:Connect(function() -- WHEN MOB DIES / GETS REMOVED
    mobdropdown:Refresh(mobs, true)
    -- ADDS THE NEW MOBS
    for _,v in pairs(game:GetService("Workspace").SpawnedMobs:GetChildren()) do -- LOOPS THROUGH ALL MOBS
        insert = true -- VALUE TO CHECK THE MOB
        for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
        if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
    end
    mobdropdown:Refresh(mobs)
end)

-- Tab 2

local Tab2 = Window:MakeTab({
	Name = 'Player',
	Icon = 'rbxassetid://4483345998',
	PremiumOnly = false
})

Tab2:AddSlider({
	Name = 'Walk Speed',
	Min = 16,
	Max = 100,
	Default = 16,
	Color = Color3.fromRGB(255,0,0),
	Increment = 1,
	ValueName = '',
	Callback = function(Value)
		game.Players.localPlayer['Character']:WaitForChild('Humanoid').WalkSpeed = Value
	end    
})

Tab2:AddSlider({
	Name = 'Jump Height',
	Min = 55,
	Max = 300,
	Default = 55,
	Color = Color3.fromRGB(255,0,0),
	Increment = 1,
	ValueName = '',
	Callback = function(Value)
		game.Players.localPlayer['Character']:WaitForChild('Humanoid').JumpPower = Value
	end    
})

-- Tab 3

local Tab3 = Window:MakeTab({
	Name = 'Misc',
	Icon = 'rbxassetid://4483345998',
	PremiumOnly = false
})

Tab3:AddToggle({
	Name = 'Infinite Stamina',
	Default = false,
	Callback = function(Value)
        _G.stamina = Value
    end
})

local teleport = Tab3:AddDropdown({
	Name = 'Teleport to Floor',
	Default = 'Teleport to Floor',
	Options = {'Floor 1', 'Floor 2', 'Floor 3', 'Floor 4'},
	Callback = function(Value)
		print(Value)
        print(OrionLib.Flags["ChangeHub"].Value)
	end    
})

Tab3:AddBind({
	Name = "Hide Hub",
	Default = Enum.KeyCode.RightShift,
	Hold = false,
    Flag = 'ChangeHub',
	Callback = function(Value)
        OrionLib:Hide(OrionLib.Flags["ChangeHub"].Value)
	end    
})

-- Functions
function InfiniteStamina()
    while _G.stamina do
        game.Players.localPlayer['Character']:WaitForChild('Stats'):FindFirstChild('Stamina').Value = 99999999
        game.Players.localPlayer['Character']:WaitForChild('Stats'):FindFirstChild('Stamina'):FindFirstChild('Current').Value = 99999999
        wait(1)
    end
end

OrionLib:Init()
